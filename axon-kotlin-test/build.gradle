apply plugin: "java-library"
apply from: "$rootDir/gradle/kotlin.gradle"
apply from: "$rootDir/gradle/dokka.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/site.gradle"

dependencies {
    def axonVersion = '3.2.2'

    testImplementation("org.springframework:spring-beans:4.3.11.RELEASE")
    testImplementation("javax.inject:javax.inject:1")
    implementation("org.axonframework:axon-core:$axonVersion")
    implementation("org.axonframework:axon-test:$axonVersion")
    implementation("org.hamcrest:hamcrest-all:1.3")

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.0.3")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.0.3")
    testCompile("org.hamcrest:hamcrest-all:1.3")
    testCompile("com.nhaarman:mockito-kotlin:1.5.0")

    testCompile("org.jetbrains.kotlin:kotlin-test:1.2.41")
    testImplementation("org.axonframework:axon-core:$axonVersion")
    testImplementation("org.axonframework:axon-test:$axonVersion")
}





import com.jfrog.bintray.gradle.BintrayExtension
import com.jfrog.bintray.gradle.tasks.BintrayUploadTask
import com.jfrog.bintray.gradle.tasks.BintrayPublishTask
import nebula.plugin.bintray.BintrayPlugin
import nebula.plugin.info.scm.ScmInfoExtension
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.execution.TaskExecutionGraph
import org.gradle.api.tasks.Upload
import org.jfrog.gradle.plugin.artifactory.task.ArtifactoryTask
import org.jfrog.gradle.plugin.artifactory.task.DeployTask




boolean dryRun = project.hasProperty('dryRun') && project.property('dryRun') as Boolean
def disable = {
    it.enabled = !dryRun
}

def runOnlyForCandidateAndFinal = { Task task ->
    project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
        task.onlyIf {
            graph.hasTask(':final') || graph.hasTask(':candidate')
        }
    }
}

project.plugins.apply org.gradle.api.publish.plugins.PublishingPlugin
project.plugins.apply BintrayPlugin
project.tasks.withType(BintrayUploadTask, disable)
project.tasks.withType(BintrayUploadTask, runOnlyForCandidateAndFinal)
project.tasks.withType(BintrayPublishTask, disable)
project.tasks.withType(BintrayPublishTask, runOnlyForCandidateAndFinal)
project.tasks.withType(Upload, disable)
project.tasks.withType(ArtifactoryTask, disable)
def runOnlyForSnapshots = { Task task ->
    project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
        task.onlyIf {
            graph.hasTask(':snapshot') || graph.hasTask(':devSnapshot')
        }
    }
}
project.tasks.withType(ArtifactoryTask, runOnlyForSnapshots)
project.tasks.withType(DeployTask, runOnlyForSnapshots)